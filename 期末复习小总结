1、软件开发生命周期模型：大爆炸模式、边写边改模式、瀑布模型、螺旋模型、敏捷开发模型
2、常见的软件测试过程模型：V模型、W模型、H模型、X模型
3、软件开发模型：大棒开发法、边写边改模型、瀑布模型、敏捷模型
4、测试用例：为实施测试而向被测试系统提供的输入数据、操作或各种环境设置以及期望结果等信息的一个特定集合。
5、黑盒测试，又称为功能测试或数据驱动测试，是把测试对象当最看不见内部的黑盒。在完全不考虑程序内容结构和处理过程的情况下，测试者仅根据程序功能的需求规范考虑确定测试结果的正确性。
6、等价类划分：根据被测对象的特性，针对整体输入域进行等价划分，也可将整体输入与分子称由各个输入条件分别构成的个体输入域进行等价划分。
一般划分为：有效等价类和无效等价类
【无效等价类的测试用例】对于无效等价类，设计测试用例引入单缺陷假设，即：一个测试用例仅覆盖一个输入条件的某一个无效等价类。
【有效等价类的测试用例】对于有效等价类，设计测试用例时他就能够尽可能多地覆盖有效等价类，直至所有有效等价类均被用例覆盖。（测试用例的设计考虑弱组合）
7、边界值测试：对于每个输入条件的每个边界点，须在该点附近确定大小为1的邻域，这里的“1”指的是一个单位长度，并非数字1。
在边界点a处选择a-1 ,a ,a+1 这三个值作为测试数据。
8、决策表（也称判定表法）：
决策表的4个组成部分：
①条件桩（列出了问题的所有条件）[ 输入区 ]
②动作桩（列出了问题规定可能采取的操作，这些操作的排列顺序没有约束）[ 输出区 ]
③条件项（列出针对他左列条件的取值。在所有可能情况之下的真假值）[ 输入取值区 ]
④动作项（列出在条件项的各种取值情况下应采取的动作）[ 输出取值区 ]
简化决策表规则：输出相同，输入相似（仅有一个输入条件的值可以不同）
9、正交表（正交实验法）：根据正交性原理，从全面试验中挑选部分有代表性的试验点，并能求出最佳工艺参数和工艺条件
正交表：Ln(qs)  
n：实际测试用例的个数，对应正交表的行数；
q：每个输入条件所取测试数据的个数，对应正交表中每个输入条件的取值个数；（水平数）
s：输入条件的总数，对应正交表的列数；（因子数）
qs：理论上全组合方式的测试用例个数，基于正交表的测试效率为n与qs的比值；
正交表的性质：
①整体可比：每一列中每个输入条件的各个测试数据出现的次数相同
②均匀分散：任意两列所构成的各有序数对出现的次数相同
10、因果图：从需求中找出因(输入条件)和果(输出或程序状态的改变)，通过因果图转化成判定表
因果图中的4种基本关系
①恒等：原因与结果之间一对一的关系。若原因出现，则结果出现；若原因不出现，则结果不出现
②非：原因与结果之间否定关系。若原因出现，则结果不出现；若原因不出现，则结果出现
③或：表示几个原因若有一个出现，则结果出现；只有当这几个原因都不出现时，结果才不出现
④与：表示几个原因若都出现，则结果才会出现；若几个原因有一个不出现，结果就不会出现
 
11、场景法：通过分析不同事件的触发顺序和处理结果，构建各个事件流，并基于这些事件的触发控制业务流程，形成多个不同场景，最终基于场景设计测试用例
①基本流，从系统的某个初始状态开始，经一系列状态变化后到达终止状态的过程中最主要的一个业务流程
②备选流，以基本流为基础，在经过基本流上每个判定节点(包括条件判定和循环判定)处满足不同的触发条件，而导致的其他事件流
场景法使用注意事项：
①最少的场景数等于事件流的总数，基本流与备选流的总数
②有且唯一有一个场景仅包含基本流
③对应某个备选流，至少应有一个场景覆盖
12、状态转化法：
状态图的使用步骤：
①根据需求，理解关键字段，获得主要的状态
②绘制状态迁移图
③画出状态迁移树
④抽取测试用例规则（每个状态至少到达一次）
状态图转换状态树：
①将初始状态或开始状态作为状态转换树的根，根在整个状态转换树中的层次是1
②假设当前生成状态转换树的层次为K,那么从左到右检查所有层次为K上的节点，将该节点对应的所有下一个可能的状态作为他的子节点，状态之间的转换作为两个状态的边
③重复步骤2，直到一个位于层次K上的节点出现在层次J上，且J小于等于K,那么这个节点就成为最终的节点，而无需继续生成其子节点；或者节点的状态是结束状态，也不需要针对该节点继续进行状态转换
13、白盒测试关注的对象是：源代码和程序结构
14、白盒测试是函数级别的，而黑盒测试是功能级别的
15、静态白盒测试：对系统静态检查，这种检查通常不需要运行被测软件，而是直接对软件形式和结构进行分析
16、计算环复杂度：
①直观观察法：封闭的区域+1
②公式法：V(G) = e–n+2（前提：单入口和单出口）
③判定节点法：V(G)=P+ 1（p代表独立判定节点的数目）
17、动态白盒测试：主要是按一定步骤和方法生成测试用例，并驱动相关模块去执行程序并发现软件中的错误和缺陷。
18、动态白盒测试包含：对判定的测试、对路径的测试、对循环的测试、对变量的测试
19、
①语句覆盖：保证程序的每一条可执行语句至少执行一次
②判定覆盖：使得程序中每个判定节点至少都获得一次“真值”和“假值”，每一个真假分支至少被执行一次，又称分支覆盖。是一个比“语句覆盖”稍强的测试标准。
③条件覆盖：设计若干测试用例，使得每个判定中每个条件的可能取值至少满足一次（条件覆盖不能保证100%的判定覆盖）
④条件判定覆盖：设计若干测试用例，使得判定中所有条件可能取值至少执行一次，同时，使得所有判定的可能至少执行一次。
⑤条件组合覆盖：设计若干测试用例，使得判定中条件的各种组合都至少执行一次。
⑥修正的判定/条件覆盖：
     1> 列出所有简单判定条件；
     2>构建真值表；
     3>对每个简单判定条件，找到能对整个判定结果产生独立影响的测试用例集合（简称独立影响对），即在真值表中依次固定其他简单判定条件，找到该条件的独立影响对；
     4>抽取能体现所有简单判定条件独立影响性的最少独立影响对。 
        针对表达式 a&&(b||c)采用MCDC设计测试用例
20、
①满足判定覆盖，一定满足语句覆盖
②满足判定覆盖，不一定满足一条件覆盖
③满足了条件覆盖，不一定满足判定覆盖
④满足了条件覆盖，不一定满足语句覆盖
⑤条件判定覆盖=判定覆盖+条件覆盖
⑥语句覆盖最弱
⑦判定覆盖
   条件覆盖
   判定条件覆盖，测试用例设计困难
   条件组合最强，测试用例数量最多
⑧条件组合覆盖：每一个判定的条件覆盖取真、取假
⑨掌握每一种覆盖的定义
⑩覆盖能力强弱的排序：
    根据代码实现：
语句覆盖—判定覆盖—条件覆盖—判定条件组合覆盖—修正条件判定覆盖
21、路径覆盖：设计若干的测试用例，使得被测试程序中的每一条路径至少被覆盖一次
22、路径测试不一定满足条件覆盖，一定满足判定覆盖
23、基于路径的测试是基于程序图和环复杂度的独立路径测试仅关注结构的测试覆盖
24、独立路径测试：
①画出程序图
②计算环复杂度
③写出独立路径
④分析有无不可行路径——如果有，进行修改
⑤分析有没有遗漏，如果有，则进行补充
25、基于循环的测试：
考虑4种特殊组合：
1）内层最小循环次数，外层最小循环次数组合，计算结果
2）内层最小循环次数，外层最大循环次数，计算结果
3）内层最大循环次数，外层最小循环次数，计算结果
4）内层最大循环次数，外层最大循环次数，计算结果
26、
1）单个循环节点测试：
边界，初始条件，最大条件，中间循环值，循环执行过程，变量变化，涉及变量的变化
2）串联循环结构：
①非关联循环节点：按单个循环节点依次测试；
②关联循环节点：结合测试
27、循环结构分类：单节点循环、循环节点串联、循环节点嵌套
28:、基于变量的测试：
①大多数情况下不需要逐一分析程序中的所有变量，一般根据重要变量进行数据流分析
②数据流分析主要关注单个变量，特别关注变量接受赋值和使用的点，该法主要关注变量从定义到使用过程的执行路径是否可靠
29、关于白盒测试方法的总结：
1）白盒测试的测试对象：代码
2）白盒测试主要运用的方面：单元测试和集成测试
3）实施白盒测试的角色：开发人员
4）进行白盒测试的意义：提高代码质量，提高产品质量
5）白盒测试的类型：静态白盒测试和动态白盒测试
30、单元测试：对软件中的最小可测试单元或基本组成单元进行检查和验证
内容：
1）静态测试
主要是通过走查、审查等会议方式，依据模块的详细设计，将代码与缺陷检查表进行对照，查看代码是否符合标准和规范
2）动态测试
主要包括对模块接口、模块边界条件、模块独立路径和错误处理进行测试
31、集成测试：在单元测试的基础上，将所有已通过单元测试的模块按照概要设计的要求组装为子系统或系统，并进行测试的过程，目的是确保各单元模块组合在一起后能够按既定意图协作运行，并确保增量的行为正确
32、集成测试方法：成对集成、邻居集成、基于独立路径的集成
33、验收测试：按照项目任务书或合同、供需双方约定的验收依据文档进行的对整个系统的测试与评审，决定是否接收或拒收系统。分为α测试和β测试
1）α测试：是由用户在开发环境下进行的测试，也可以是开发机构内部的用户在模拟实际操作环境下进行的测试。开发者坐在用户旁边，这是在开发者受控的环境下进行的测试。由开发者随时记录下错误情况和使用中的问题。
2）β测试：是由软件的多个用户在一个或多个用户的实际使用环境下进行的测试。开发者通常不在测试现场，这是在开发者无法控制的环境下进行的测试。由用户记录下遇到的所有问题，定期向开发者报告。β测试是一种模拟真实的使用环境从而发现缺陷的一种测试
34、测试报告（test report）就是把测试的过程和结果写成文档，对发现的问题和缺陷进行分析，为纠正软件存在的质量问题提供依据，同时为软件验收和交付打下基础。
测试完毕或一个阶段完毕，需要写出测试报告
35、CMM模型（能力成熟度模型）：是对于软件组织在定义、实施、度量、控制和改善其软件过程的实践中各个发展阶段的描述。
CMM的核心:
※ 把开发视为一个过程
※ 进行过程监控和研究
※ 目标：更科学化、更标准化、更好实现商业目标
